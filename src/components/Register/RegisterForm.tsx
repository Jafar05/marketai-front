import React, { useState } from "react";
import { Form, Input, Button, message, Card, Select } from "antd";
import style from "./RegisterForm.module.css";
import "antd/dist/reset.css";

interface FormValues {
    fullName: string;
    email: string;
    phone: string;
    countryCode: string;
    password: string;
}

const countries = [
    { code: "+7", flag: "üá∑üá∫", name: "–†–æ—Å—Å–∏—è", mask: "999 999 99 99" },
    { code: "+375", flag: "üáßüáæ", name: "–ë–µ–ª–∞—Ä—É—Å—å", mask: "99 999 99 99" },
    { code: "+380", flag: "üá∫üá¶", name: "–£–∫—Ä–∞–∏–Ω–∞", mask: "99 999 99 99" },
    { code: "+996", flag: "üá∞üá¨", name: "–ö–∏—Ä–≥–∏–∑–∏—è", mask: "999 999 999" },
    { code: "+998", flag: "üá∫üáø", name: "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", mask: "99 999 99 99" },
    { code: "+374", flag: "üá¶üá≤", name: "–ê—Ä–º–µ–Ω–∏—è", mask: "99 999 999" },
    { code: "+993", flag: "üáπüá≤", name: "–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω", mask: "9 99 999999" },
    { code: "+994", flag: "üá¶üáø", name: "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", mask: "99 999 99 99" },
    { code: "+995", flag: "üá¨üá™", name: "–ì—Ä—É–∑–∏—è", mask: "99 999 999" },
    { code: "+90", flag: "üáπüá∑", name: "–¢—É—Ä—Ü–∏—è", mask: "999 999 99 99" },
];

const formatPhone = (digits: string, mask: string) => {
    let i = 0;
    return mask.replace(/\d/g, () => digits[i++] || "");
};

const RegisterForm: React.FC = () => {
    const [form] = Form.useForm<FormValues>();
    const [selectedCountry, setSelectedCountry] = useState(countries[0]);
    const [phoneDisplay, setPhoneDisplay] = useState("");
    const [loading, setLoading] = useState(false);


    const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const target = e.target as HTMLInputElement;
        const raw = target.value.replace(/\D/g, "");
        setPhoneDisplay(formatPhone(raw, selectedCountry.mask));
        form.setFieldValue(["phone"], raw);
    };

    const handleCountryChange = (value: string) => {
        const country = countries.find((c) => c.code === value);
        if (!country) return;
        setSelectedCountry(country);
        setPhoneDisplay("");
        form.setFieldValue(["phone"], "");
    };

    const handleLogin = async (values: FormValues) => {
        try {
            setLoading(true)
            const phoneToSend = `${selectedCountry.code}${values.phone}`;
            const response = await fetch("/api/auth/api/v1/register", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    fullName: values.fullName,
                    email: values.email,
                    phoneNumber: phoneToSend,
                    password: values.password, // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                }),
            });

            if (!response.ok) {
                const errText = await response.text().catch(() => "");
                throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.status} ${errText}`);
            }

            const data = await response.json();
            console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", data);
            message.success("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
            form.resetFields();
            setPhoneDisplay("");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
            message.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            setLoading(false)
        }
    };

    return (
        <div className={style.formContainer}>
            <Card title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞" className={style.formCard} bordered>
                <Form
                    form={form}
                    layout="vertical"
                    onFinish={handleLogin}
                    style={{ width: "100%" }}
                >
                    <Form.Item
                        label="–§–ò–û"
                        name="fullName"
                        rules={[{ required: true, message: "–í–≤–µ–¥–∏—Ç–µ –§–ò–û" }]}
                    >
                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è" />
                    </Form.Item>

                    <Form.Item
                        label="Email"
                        name="email"
                        rules={[
                            { required: true, message: "–í–≤–µ–¥–∏—Ç–µ Email" },
                            { type: "email", message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email" },
                        ]}
                    >
                        <Input placeholder="example@mail.com" />
                    </Form.Item>

                    <Form.Item
                        label="–ü–∞—Ä–æ–ª—å"
                        name="password"
                        rules={[
                            { required: true, message: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" },
                            { min: 6, message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤" },
                        ]}
                    >
                        <Input.Password placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" />
                    </Form.Item>

                    <Form.Item label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" required>
                        <Input.Group compact>
                            <Select
                                defaultValue={selectedCountry.code}
                                style={{ width: "30%" }}
                                onChange={handleCountryChange}
                            >
                                {countries.map((c) => (
                                    <Select.Option key={c.code} value={c.code}>
                                        {c.flag} ({c.code})
                                    </Select.Option>
                                ))}
                            </Select>

                            <Form.Item
                                name="phone"
                                noStyle
                                rules={[
                                    { required: true, message: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" },
                                    {
                                        pattern: /^\d{7,10}$/,
                                        message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã",
                                    },
                                ]}
                            >
                                <Input
                                    style={{ width: "70%" }}
                                    placeholder={selectedCountry.mask}
                                    maxLength={selectedCountry.mask.replace(/\D/g, "").length}
                                    value={phoneDisplay}
                                    onChange={handlePhoneChange}
                                />
                            </Form.Item>
                        </Input.Group>
                    </Form.Item>

                    <Form.Item>
                        <Button type="primary" htmlType="submit" block loading={loading}>
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </Button>
                    </Form.Item>
                </Form>
            </Card>
        </div>
    );
};

export default RegisterForm;
